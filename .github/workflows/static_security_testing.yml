# This workflow will execute a SAST scan of the Application Release specified

name: Continuous Inspection

on:
  workflow_dispatch:
    inputs:
      release-id:
        description: 'Fortify Release Id'
        required: true
        default: 56327

jobs:

  fortify-on-demand:
    runs-on: ubuntu-latest
    #runs-on: self-hosted

    # Checkout the code
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        # Fetch at least the immediate parents so that if this is a pull request then we can checkout the head.
        fetch-depth: 2
    # If this run was triggered by a pull request event, then checkout the head of the pull request instead of the merge commit.
    - run: git checkout HEAD^2
      if: ${{ github.event_name == 'pull_request' }}   

    # Setup JDK 1.8 on host
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

#
# Fortify on Demand static scan using "official" GitHub Actions
#  
    # Prepare source+dependencies for upload. 
    # Update PACKAGE_OPTS based on the ScanCentral Client documentation and your project's included tech stack(s).
    #   ScanCentral Client will download dependencies for maven, gradle and msbuild projects.
    #   For other build tools, add your build commands to the workflow to download necessary dependencies and prepare according to Fortify on Demand Packaging documentation.
    - name: Download Fortify ScanCentral Client
      uses: fortify/gha-setup-scancentral-client@v1
    - name: Package Code + Dependencies
      run: scancentral package $PACKAGE_OPTS -o package.zip
      env:
        PACKAGE_OPTS: "-bt mvn"

    # Start Fortify on Demand SAST scan. Be sure to set secrets/variables for your desired configuration and appropriate URLs
    - name: Download Fortify on Demand Universal CI Tool
      uses: fortify/gha-setup-fod-uploader@v1
    - name: Perform SAST Scan
      run: java -jar $FOD_UPLOAD_JAR -z package.zip -aurl $FOD_API_URL -purl $FOD_URL -rid "$FOD_RELEASE_ID" -tc "$FOD_TENANT" -uc "$FOD_USER" "$FOD_PAT" $FOD_UPLOADER_OPTS -n "$FOD_UPLOADER_NOTES"
      env:
        FOD_TENANT: ${{ secrets.FOD_TENANT }}
        FOD_USER: ${{ secrets.FOD_USER }}
        FOD_PAT: ${{ secrets.FOD_PAT }}
        FOD_RELEASE_ID: ${{ github.event.inputs.release-id }}
        FOD_URL: "https://emea.fortify.com/"
        FOD_API_URL: "https://api.emea.fortify.com/"
        FOD_UPLOADER_OPTS: "-ep 2 -pp 0 -I 1 -apf"
        FOD_UPLOADER_NOTES: 'Triggered by GitHub Actions (${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})'

    # Once scan completes, pull SAST issues from Fortify on Demand and generate SARIF output. Be sure to set secrets/variables for your desired configuration and appropriate URLs
    - name: Download Results
      uses: fortify/gha-fod-generate-sarif@1.1.0
      with:
        base-url: https://emea.fortify.com
        tenant: ${{ secrets.FOD_TENANT }}
        user: ${{ secrets.FOD_USER }}
        password: ${{ secrets.FOD_PAT }}
        release-id: ${{ github.event.inputs.release-id }}
        output: ./sarif/output.sarif

    # Import Fortify on Demand results to GitHub Security Code Scanning
    - name: Import Results
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: ./sarif/output.sarif
#
# Fortify on Demand static scan using PowerShellForFOD module
# 
    # Package up the source code and pom so that it can be uploaded to FOD
    #- name: Zip up source code
    #  uses: papeloto/action-zip@v1
    #  with:
    #    files: fod/ pom.xml
    #    dest: fod.zip

    # Upload fod.zip to Fortify on Demand for static application security testing
    #- name: SAST with FOD/SCA
    #  shell: pwsh
    #  run: |
    #    $ScanSummary = .\fortify-fod.ps1 -ZipFile '.\fod.zip' -ApplicationName 'IWA (Java)' -ReleaseName 'master' -Notes 'GitHub Action initiated scan' -FodApiUri 'https://api.emea.fortify.com' -FodApiUsername '${{ secrets.FOD_ACCESS_KEY }}' -FodApiPassword '${{ secrets.FOD_SECRET_KEY }}' -Raw
    #    $ScanId = $ScanSummary.scanId
    #    $ReleaseName = $ScanSummary.releaseName
    #    $ScanStatus = $ScanSummary.analysisStatusType
    #    $StarRating = $ScanSummary.starRating
    #    $IssueCountCritical = $ScanSummary.issueCountCritical
    #    $IssueCountHigh = $ScanSummary.issueCountHigh
    #    $IssueCountMedium = $ScanSummary.issueCountMedium
    #    $IssueCountLow = $ScanSummary.issueCountLow
    #    $TotalIssues = $ScanSummary.issueCountTotal
    #    Write-Host "Finished scan $ScanId with status '$ScanStatus'"
    #    Write-Host "Release '$ReleaseName' has a $StarRating star rating"
    #    Write-Host "Critical Issues:  $IssueCountCritical"
    #    Write-Host "High Issues:      $IssueCountHigh"
    #    Write-Host "Medium Issues:    $IssueCountMedium"
    #    Write-Host "Low Issues:       $IssueCountLow"
    #    Write-Host "Total Issues:     $IssueCountTotal"
    #    if ($StarRating -lt 1) { exit 1 } # set to your own criteria
    #  env:
    #    repo-token: "${{ secrets.GITHUB_TOKEN }}"
