# This workflow will build a Java project with Maven, upload source code to Fortify on Demand (for static analysis)
# and if successful deploy the application to Heroku

name: Continuous Inspection

on:
  push:
    branches:
      - master
      - feature/**
      - release/**
  pull_request:
    branches:
      - master

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    # Checkout the code
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup JDK 1.8 of host
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    # Build with Maven (debug) and
    - name: Build with Maven
      run: mvn -Dmaven.compiler.debuglevel=lines,vars,source -Dtest=!UserServiceTest -P fortify,jar -B clean verify package --file pom.xml

    # Package up the source code and pom so that it can be uploaded to FOD
    - name: Zip up source code
      uses: papeloto/action-zip@v1
      with:
        files: fod/ pom.xml
        dest: fod.zip

    # Upload fod.zip to Fortify on Demand for static analysis
    - name: Static Analysis with FOD
      shell: pwsh
      run: .\fortify-fod.ps1 -ZipFile '.\fod.zip' -ReleaseId 56327 -Notes 'GitHub Action initiated scan' -FodApiUri 'https://api.emea.fortify.com' -FodApiUsername '${{ secrets.FOD_ACCESS_KEY }}' -FodApiPassword '${{ secrets.FOD_SECRET_KEY }}'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Create WAR file for deployment to Heroku (testing is skipped as we already did it earlier)
    # then deploy it using Heroku Maven plugin
    - name: Heroku Deployment with Maven
      run: mvn -P war -DskipTests -B heroku:deploy-war --file pom.xml
      if: always() # always deploy for now as we are expecting static analysis issues for this application
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

